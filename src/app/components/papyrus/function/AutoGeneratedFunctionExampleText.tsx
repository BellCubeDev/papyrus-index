import type { PapyrusScriptFunctionIndexed } from "../../../../papyrus/data-structures/indexing/function";
import type { PapyrusGame } from "../../../../papyrus/data-structures/pure/game";
import { PapyrusScriptTypeArchetype } from "../../../../papyrus/data-structures/pure/type";
import { papyrusTypeToString } from "../type/PapyrusType";

export function AutoGeneratedFunctionExampleText<TGame extends PapyrusGame>({func, scriptName}: {readonly func: PapyrusScriptFunctionIndexed<TGame>, readonly scriptName: string}): string {
    const scriptNameCapitalized = scriptName.charAt(0).toUpperCase() + scriptName.slice(1);
    const parameterData = func.parameters.map(p => {
        const typeName = papyrusTypeToString(p.value);
        const typeNameForVarName = typeName.charAt(0).toUpperCase() + typeName.slice(1, -2) + (typeName.endsWith('[]') ? 'Array' : typeName.slice(-2));
        return [typeName, `my${typeNameForVarName}__${p.name}`] as const;
    });
    return `
${parameterData.map(([typeName, varName]) => `${typeName} ${varName}`).join('\n')}

${
    func.returnType.type === PapyrusScriptTypeArchetype.None ? '' : `${papyrusTypeToString(func.returnType)} returnedValue = `
}${func.isGlobal ? scriptName : `my${scriptNameCapitalized}__toCallFunctionOn`}.${func.name}(${parameterData.map(([, varName]) => varName).join(', ')})
`.trim();
}
