name: Build Next.js App
on:
  workflow_dispatch:
  push:
    branches:
      - production
    paths:
      - .github/workflows/build.yaml
      - src/**
      - data/**
      - public/**
      - pnpm-lock.yaml
      - .npmrc
      - '*.js' # only applied to top-level files, don't worry
      - '*.mjs'
      - '*.ts'
      - '*.json'
  schedule: # every Sunday and Wednesday at midnight (so we always have Function of the Day up to date, our wiki data is reasonably fresh, and GitHub doesn't yeet our caches)
    - cron: '0 0 * * 0,3'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    env:
      NEXUS_API_KEY: ${{ secrets.NEXUS_API_KEY }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'schedule' && 'production' || github.ref }}

      # credit to https://github.com/JosephM101/Wine-Install-Scripts/blob/main/install-wine.sh
      #
      # Yes, installing Wine is legit faster than just running it on Windows.
      # Don't know why the Windows runners are so slow.
      #
      - name: Install Wine
        run: |
          sudo bash ./.github/workflows/install-wine.sh
          wine --version

      - name: Install pnpm
        uses: pnpm/action-setup@v4 # uses version in package.json

      - name: Use Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install NPM Dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore Custom Caches
        id: cache-restore-custom
        uses: actions/cache/restore@v4
        with:
          path: cache
          key: does-not-exist-${{ github.run_id }}
          # we don't need any specific info; we just store this data so we don't have to DOS the hosting server every time we build.
          restore-keys: custom-cache-

      - name: Use Next.js Caching
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('src/**/*.js', 'src/**/*.jsx', 'src/**/*.ts', 'src/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Generate Build Markdown
        run: |
          date=$(node -e "console.log(new Date().toLocaleDateString('en-US', { dateStyle: 'full' }))")
          actionsRunUrl='${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          echo "NEXT_PUBLIC_BUILD_SOURCE_MD=Last built on $date via [GitHub Actions - ${{github.workflow}} #${{ github.run_number }}]($actionsRunUrl)" >> $GITHUB_ENV

      - name: Run Build Script
        run: pnpm run build

      - name: Save Custom Caches
        id: cache-save-custom
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            cache
            src/papyrus/scraping/download/BSArch.exe
            data/*/*/download
          key: custom-cache-${{ hashFiles('cache/**/index.json', 'src/papyrus/scraping/download/BSArch.exe', 'data/*/*/download/.nexusFileId') }} # only need to save a new version of the cache if something updated

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: out

  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to GitHub Pages
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
