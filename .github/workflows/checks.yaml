name: Checks
on:
  workflow_dispatch:
  push:
  gollum: # TODO: Create something to check the wiki's formatting! Once we have wiki formatting, of course.
  pull_request_target:

env:
  CI_WRITE_LOG_TO_FILE: 'true'

jobs:


  papyrus-parser-check:
    runs-on: ubuntu-latest
    name: Papyrus Parser
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: '.gitignore'


      # only run subsequent steps if one of the changes includes a data/**/*.psc file
      - name: Get List of Changed Files
        uses: tj-actions/changed-files@v45
        id: changed_files
        with:
          since_last_remote_commit: true
          files: 'data/**/*.psc'


      - name: Checkout
        if: steps.changed_files.outputs.all_changed_files_count != '0'
        uses: actions/checkout@v4

      # If the cache with downloaded mods is here, we might as well use it.
      - name: Restore Custom Caches
        if: steps.changed_files.outputs.all_changed_files_count != '0'
        id: cache-restore-custom
        uses: actions/cache/restore@v4
        with:
          path: |
            cache
            src/papyrus/scraping/download/BSArch.exe
            data/*/*/download
          key: custom-cache---does---not---exist---${{ github.run_id }}
          # we don't need any specific info; we just store this data so we don't have to DOS the hosting server every time we build.
          restore-keys: |
            custom-cache-

      - name: Install pnpm
        if: steps.changed_files.outputs.all_changed_files_count != '0'
        uses: pnpm/action-setup@v4 # uses version in package.json

      - name: Use Node.js v22
        if: steps.changed_files.outputs.all_changed_files_count != '0'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install NPM Dependencies
        if: steps.changed_files.outputs.all_changed_files_count != '0'
        run: pnpm install --frozen-lockfile

      - name: Run Papyrus Parser
        if: steps.changed_files.outputs.all_changed_files_count != '0'
        run: pnpm run parse:and-index


  type-check:
    runs-on: ubuntu-latest
    name: Type Check
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4 # uses version in package.json

      - name: Use Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install NPM Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Type Check
        run: pnpm run typecheck

      # This action doesn't actually support Next.js' format due to hardcoded string literals. Oh well.
      #- name: Parse Next.js Type Check Log for GitHub Annotations
      #  uses: DerLev/eslint-annotations@v2
      #  if: failure()
      #  with:
      #    typescript-log: typecheck.log
      #    typescript-annotation-prefix: 'Type error:'
      #    only-changed-in-pr: ${{ github.base_ref != null }}

  eslint-check:
    runs-on: ubuntu-latest
    name: ESLint Check
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4 # uses version in package.json

      - name: Use Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install NPM Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint Check
        run: pnpm run lint -o eslint_report.json --format json

      - name: Parse ESLint Report for GitHub Annotations
        uses: DerLev/eslint-annotations@v2
        # using always() instead of failure() here allows us to still get warnings, even if the job passes
        if: always()
        with:
          eslint-report: eslint_report.json
          only-changed-in-pr: ${{ github.base_ref != null }}
